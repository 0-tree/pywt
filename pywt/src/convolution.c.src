/* Copyright (c) 2006-2012 Filip Wasilewski <http://en.ig.ma/> */
/* See COPYING for license details. */

#include "convolution.h"

/**begin repeat
 * #type = double, float#
 */

int @type@_downsampling_convolution_periodization(const @type@ * const restrict input, const index_t N,
                                                  const @type@ * const restrict filter, const index_t F,
                                                  @type@ * const restrict output, const index_t step)
{
    /*
    * Should it be an error to call this mode with signal lengths
    * not divisible by the step? Not really periodic if padded.
    *
    * If it is exactly divisible, can it be replaced by one loop?
    *   for (i=0; i < N; i += step){
    *     @type@ sum = 0;
    *     for (j=0; j < F; j++){
    *       sum += filter[j] * input[(i-j+N) % N];
    *     *(ptr_w++) = sum;
    *   }
    */

    index_t i = F/2, o = 0;
    const index_t padding = N % 2; // Should be N%step for larger steps?

    for (; i < F && i < N; i += step, ++o) {
        @type@ sum = 0;
        index_t j;
        for (j = 0; j <= i; ++j)
            sum += filter[j] * input[i-j];
        while (j < F){
            for (index_t k = 0; k < padding && j < F; ++k, ++j)
                sum += filter[j] * input[N-1];
            for (index_t k = 0; k < N && j < F; ++k, ++j)
                sum += filter[j] * input[N-1-k];
        }
        output[o] = sum;
    }

    /* F - N-1 : filter in input range.  Most time is spent in this loop */
    for(; i < N; i+=step, ++o){    /* input elements, */
        @type@ sum = 0;
        for(index_t j = 0; j < F; ++j)
            sum += input[i-j]*filter[j];
        output[o] = sum;
    }

    for (; i < F && i < N + F/2; i += step, ++o) {
        @type@ sum = 0;
        index_t j = 0;

        while (i-j >= N){
            for (index_t k = 0; k < padding && i-j >= N; ++k, ++j)
                sum += filter[i-N-j] * input[N-1];
            for (index_t k = 0; k < N && i-j >= N; ++k, ++j)
                sum += filter[i-N-j] * input[k];
        }
        for (; j <= i; ++j)
            sum += filter[j] * input[i-j];
        while (j < F){
            for (index_t k = 0; k < padding && j < F; ++k, ++j)
                sum += filter[j] * input[N-1];
            for (index_t k = 0; k < N && j < F; ++k, ++j)
                sum += filter[j] * input[N-1-k];
        }
        output[o] = sum;
    }

    for(; i < N + F/2; i += step, ++o){   /* input elements */
        @type@ sum = 0;
        index_t j = 0;
        while (i-j >= N){
            for (index_t k = 0; k < padding && i-j >= N; ++k, ++j)
                sum += filter[i-N-j] * input[N-1];
            for (index_t k = 0; k < N && i-j >= N; ++k, ++j)
                sum += filter[i-N-j] * input[k];
        }
        for (; j < F; ++j)
            sum += filter[j] * input[i-j];
        output[o] = sum;
    }
    return 0;
}


int @type@_downsampling_convolution(const @type@ * const restrict input, const index_t N,
                                    const @type@ * const restrict filter, const index_t F,
                                    @type@ * const restrict output,
                                    const index_t step, MODE mode)
{
    /*
     * This convolution performs efficient downsampling by computing every
     * step'th element of normal convolution (currently tested only for step=1
     * and step=2).
     *
     * It also implements several different strategies of dealing with border
     * distortion problem (the problem of computing convolution for not
     * existing elements of signal). To handle this the signal has to be
     * "extended" on both sides by computing the missing values.
     *
     * General schema is as follows:
     * 1. Handle extended on the left, convolve filter with samples computed for
     *    time < 0
     * 2. Do the normal decimated convolution of filter with signal samples
     * 3. Handle case where filter extends beyond signal to both the left and
     *    right (only applies if F > N)
     * 4. Handle extended on the right, convolve filter with samples computed
     *    for time > n-1
     */

    index_t i = step - 1, o = 0;

    if(mode == MODE_PERIODIZATION)
        return @type@_downsampling_convolution_periodization(input, N, filter, F, output, step);

    if (mode == MODE_SMOOTH && N < 2)
        mode = MODE_CONSTANT_EDGE;

    /* Other signal extension modes */
    /* 0 - F-1 : sliding in filter */
    for(; i < F && i < N; i+=step, ++o){
        @type@ sum = 0;
        index_t j;
        for(j = 0; j <= i; ++j)
            sum += filter[j]*input[i-j];

        switch(mode) {
        case MODE_SYMMETRIC:
            while (j < F){
                for(index_t k = 0; k < N && j < F; ++j, ++k)
                    sum += filter[j]*input[k];
                for(index_t k = 0; k < N && j < F; ++k, ++j)
                    sum += filter[j] * input[N-1-k];
            }
            break;
        case MODE_CONSTANT_EDGE:
            for(; j < F; ++j)
                sum += filter[j]*input[0];
            break;
        case MODE_SMOOTH:
            for(index_t k = 1; j < F; ++j, ++k)
                sum += filter[j]*(input[0] + k * (input[0] - input[1]));
            break;
        case MODE_PERIODIC:
            while (j < F)
                for(index_t k = 0; k < N && j < F; ++k, ++j)
                    sum += filter[j]*input[N-1-k];
            break;
        case MODE_ZEROPAD:
        default:
            break;
        }
        output[o] = sum;
    }

    /*
     * F - N-1 : filter in input range - simple convolution
     * Most time is spent in this loop.
     */
    for(; i < N; i+=step, ++o){  /* input elements, */
        @type@ sum = 0;

        for(index_t j = 0; j < F; ++j)
            sum += input[i-j]*filter[j];
        output[o] = sum;
    }

    for(; i < F; i+=step, ++o){
        @type@ sum = 0;
        index_t j = 0;
        switch(mode) {
        case MODE_SYMMETRIC:
            /* TODO: add offset to j? Inherited, not sure what this means */
            // Process elements beyond end in reverse (i.e. away from data)
            while (i - j >= N){
                for(index_t k = 0; k < N && i-j >= N; ++j, ++k)
                    sum += filter[i-N-j]*input[N-1-k];
                for(index_t k = 0; k < N && i-j >= N; ++j, ++k)
                    sum += filter[i-N-j]*input[k];
            }
            break;
        case MODE_CONSTANT_EDGE:
            for(; i-j >= N; ++j)
                sum += filter[j]*input[N-1];
            break;
        case MODE_SMOOTH:
            for(index_t k = i - N + 1; i-j >= N; ++j, --k)
                sum += filter[j]*(input[N-1] + k * (input[N-1] - input[N-2]));
            break;
        case MODE_PERIODIC:
            while (i-j >= N)
                for (index_t k = 0; k < N && i-j >= N; ++j, ++k)
                    sum += filter[i-N-j]*input[k];
            break;
        case MODE_ZEROPAD:
        default:
            j = i - N + 1;
            break;
        }
        for(; j <= i; ++j)
            sum += filter[j]*input[i-j];
        switch(mode) {
        case MODE_SYMMETRIC:
            while (j < F){
                for(index_t k = 0; k < N && j < F; ++j, ++k)
                    sum += filter[j]*input[k];
                for(index_t k = 0; k < N && j < F; ++k, ++j)
                    sum += filter[j] * input[N-1-k];
            }
            break;
        case MODE_CONSTANT_EDGE:
            for(; j < F; ++j)
                sum += filter[j]*input[0];
            break;
        case MODE_SMOOTH:
            for(index_t k = 1; j < F; ++j, ++k)
                sum += filter[j]*(input[0] + k * (input[0] - input[1]));
            break;
        case MODE_PERIODIC:
            while (j < F)
                for(index_t k = 0; k < N && j < F; ++k, ++j)
                    sum += filter[j]*input[N-1-k];
            break;
        case MODE_ZEROPAD:
        default:
            break;
        }
        output[o] = sum;
    }

    /* N - N+F-1 : sliding out filter */
    for(; i < N+F-1; i += step, ++o){
        @type@ sum = 0;
        index_t j = 0;
        switch(mode) {
        case MODE_SYMMETRIC:
            /* TODO: add offset to j? Inherited, not sure what this means */
            // Process elements beyond end in reverse (i.e. away from data)
            while (i - j >= N){
                for(index_t k = 0; k < N && i-j >= N; ++j, ++k)
                    sum += filter[i-N-j]*input[N-1-k];
                for(index_t k = 0; k < N && i-j >= N; ++j, ++k)
                    sum += filter[i-N-j]*input[k];
            }
            break;
        case MODE_CONSTANT_EDGE:
            for(; i-j >= N; ++j)
                sum += filter[j]*input[N-1];
            break;
        case MODE_SMOOTH:
            for(index_t k = i - N + 1; i-j >= N; ++j, --k)
                sum += filter[j]*(input[N-1] + k * (input[N-1] - input[N-2]));
            break;
        case MODE_PERIODIC:
            while (i-j >= N)
                for (index_t k = 0; k < N && i-j >= N; ++j, ++k)
                    sum += filter[i-N-j]*input[k];
            break;
        case MODE_ZEROPAD:
        default:
            j = i - N + 1;
            break;
        }
        for(; j < F; ++j)
            sum += filter[j]*input[i-j];
        output[o] = sum;
    }
    return 0;
}

/*
 * Requires zero-filled output buffer output is larger than input
 * performs "normal" convolution of "upsampled" input coeffs array with filter
 */

int @type@_upsampling_convolution_full(const @type@ * const restrict input, const index_t N,
                                       const @type@ * const restrict filter, const index_t F,
                                       @type@ * const restrict output, const index_t O)
{
    if(F<2)
        return -1;

    for(index_t i = N-1, o = (N-1) * 2; i >= 0; --i, o -= 2){
        /*
         * sliding in filter from the right (end of input)
         * i0 0  i1 0  i2 0
         *                f1 -> o1
         *             f1 f2 -> o2
         *          f1 f2 f3 -> o3
         */
        for(index_t j = 0; j < F; ++j)
            output[o + j] += input[i] * filter[j];
    }
    return 0;
}

/*
 * performs IDWT for PERIODIZATION mode only
 * (refactored from the upsampling_convolution_valid_sf function)
 *
 * The upsampling is performed by splitting filters to even and odd elements
 * and performing 2 convolutions
 *
 * The input data has to be periodically extended for this mode.
 */

int @type@_upsampling_convolution_valid_sf_periodization(const @type@* input,
                                                         const index_t N,
                                                         const @type@*
                                                         filter, const index_t
                                                         F, @type@* output,
                                                         const index_t O)
{
    if(F%2) return -3; /* Filter must have even-length. */

    /*
     * Handle special situation when input coeff data is shorter than half of
     * the filter's length. The coeff array has to be extended periodically.
     * This can be only valid for PERIODIZATION_MODE
     */
    if(N < F/2) {
        /* Input data for periodization mode has to be periodically extended */

        /* New length for temporary input */
        const index_t N_p = F/2 - 1 + N;

        /* periodization_buf will hold periodically copied input coeffs values */
        @type@ * periodization_buf = wtcalloc(N_p, sizeof(*periodization_buf));

        if(periodization_buf == NULL)
            return -1;

        /* Copy input data to its place in the periodization_buf
         * -> [0 0 0 | i1 i2 i3 | i1 i2 ...] */
        const index_t k = (F/2-1)/2;
        for(index_t i=0, o=k; o < N_p; ++i, ++o)
            periodization_buf[o] = input[i%N];

        /* copy cyclically () to left    [... i2 i3 i1 i2 i3 i1 i2 i3] */
        for(index_t i=k-1; i >= 0; --i)
            periodization_buf[i] = periodization_buf[N+i];

        /* Now perform the valid convolution */
        if((F/2)%2){
            @type@_upsampling_convolution_valid_sf(periodization_buf, N_p, filter, F, output, O, MODE_ZEROPAD);

        /* The F_2%2==0 case needs special result fix (oh my, another one..) */
        } else {

            /*
             * Cheap result fix for short inputs
             * Memory allocation for temporary output is done.
             * Computed temporary result is copied to output*
             */
            @type@ * ptr_out = wtcalloc(idwt_buffer_length(N, F, MODE_PERIODIZATION),
                                        sizeof(@type@));
            if(ptr_out == NULL){
                wtfree(periodization_buf);
                return -1;
            }

            /* Convolve here as for (F_2%2) branch above */
            @type@_upsampling_convolution_valid_sf(periodization_buf, N_p, filter, F, ptr_out, O, MODE_ZEROPAD);

            /* rewrite result to output */
            for(index_t i=1; i < 2*N; ++i){
                output[i] += ptr_out[i-1];
            }
            /* and the first element */
            output[0] += ptr_out[2*N-1];
            wtfree(ptr_out);
            /* and voila!, ugh */
        }

    } else {
        /* Otherwise (N >= F_2) */
        @type@ *ptr_out = output;
        @type@ * periodization_buf = NULL;
        @type@ *periodization_buf_rear = NULL;
        @type@ *ptr_base;
        @type@ sum_even, sum_odd;
        index_t i, j, k, N_p = 0;
        index_t F_2 = F/2;

        /* Allocate memory for even and odd elements of the filter */
        @type@ * filter_even = wtmalloc(F_2 * sizeof(@type@));
        @type@ * filter_odd = wtmalloc(F_2 * sizeof(@type@));

        if(filter_odd == NULL || filter_even == NULL){
            if(filter_odd == NULL) wtfree(filter_odd);
            if(filter_even == NULL) wtfree(filter_even);
            return -1;
        }

        /* split filter to even and odd values */
        for(i = 0; i < F_2; ++i){
            filter_even[i] = filter[i << 1];
            filter_odd[i] = filter[(i << 1) + 1];
        }

        /*
         * ############################################################
         * This part is quite complicated and has some wild checking to
         * get results similar to those from Matlab(TM) Wavelet Toolbox
         */
        k = F_2-1;

        /* Check if extending is really needed */
        /* split filter len correct + extra samples*/
        N_p = F_2-1 + (index_t) ceil(k/2.);

        /*
         * ok, if is then do:
         * 1. Allocate buffers for front and rear parts of extended input
         * 2. Copy periodically appropriate elements from input to the buffers
         * 3. Convolve front buffer, input and rear buffer with even and odd
         *    elements of the filter (this results in upsampling)
         * 4. Free memory
         */

        if(N_p > 0){
            /*
             * Allocate memory only for the front and rear extension parts, not
             * the whole input
             */
            periodization_buf = wtcalloc(N_p, sizeof(@type@));
            periodization_buf_rear = wtcalloc(N_p, sizeof(@type@));

            /* Memory checking */
            if(periodization_buf == NULL || periodization_buf_rear == NULL){
                if(periodization_buf == NULL) wtfree(periodization_buf);
                if(periodization_buf_rear == NULL) wtfree(periodization_buf_rear);
                wtfree(filter_odd);
                wtfree(filter_even);
                return -1;
            }

            /* Fill buffers with appropriate elements */

            /* copy from beginning of input to end of buffer */
            memcpy(periodization_buf + N_p - k, input, k * sizeof(@type@));
            for(i = 1; i <= (N_p - k); ++i)
                periodization_buf[(N_p - k) - i] = input[N - (i%N)];

            /* copy from end of input to beginning of buffer */
            memcpy(periodization_buf_rear, input + N - k, k * sizeof(@type@));
            for(i = 0; i < (N_p - k); ++i)
                periodization_buf_rear[k + i] = input[i%N];

            /*
             * Convolve filters with the (front) periodization_buf and compute
             * the first part of output
             */

            ptr_base = periodization_buf + F_2 - 1;

            if(k%2 == 1){
                sum_odd = 0;

                for(j = 0; j < F_2; ++j)
                    sum_odd += filter_odd[j] * ptr_base[-j];
                *(ptr_out++) += sum_odd;

                --k;
                if(k)
                    @type@_upsampling_convolution_valid_sf(periodization_buf + 1, N_p-1, filter, F, ptr_out, O-1, MODE_ZEROPAD);

                ptr_out += k; /* k0 - 1, really move backward by 1 */

            } else if(k){
                @type@_upsampling_convolution_valid_sf(periodization_buf, N_p,
                                                        filter, F, ptr_out, O,
                                                        MODE_ZEROPAD);
                ptr_out += k;
            }
        }

        /*
         * Perform _valid_ convolution (only when all filter_even and
         * filter_odd elements are in range of input data).
         *
         * This part is simple, no extra hacks, just two convolutions in one
         * loop
         */

        ptr_base = (@type@*)input + F_2 - 1;
        for(i = 0; i < N-(F_2-1); ++i){ /* sliding over signal from left to right */

            sum_even = 0;
            sum_odd = 0;

            for(j = 0; j < F_2; ++j){
                sum_even += filter_even[j] * ptr_base[i-j];
                sum_odd += filter_odd[j] * ptr_base[i-j];
            }

            *(ptr_out++) += sum_even;
            *(ptr_out++) += sum_odd;
        }

        if(N_p > 0){
            k = F_2-1;
            if(k%2 == 1){
                if(F/2 <= N_p - 1){ /* k > 1 ? */
                    @type@_upsampling_convolution_valid_sf(periodization_buf_rear , N_p-1, filter, F, ptr_out, O-1, MODE_ZEROPAD);
                }

                ptr_out += k; /* move forward anyway -> see lower */

                if(F_2%2 == 0){ /* remaining one element */
                    ptr_base = periodization_buf_rear + N_p - 1;

                    sum_even = 0;
                    for(j = 0; j < F_2; ++j){
                        sum_even += filter_even[j] * ptr_base[-j];
                    }
                    *(--ptr_out) += sum_even; /* move backward first */
                }
            } else {
                if(k){
                    @type@_upsampling_convolution_valid_sf(periodization_buf_rear,
                                                            N_p, filter, F,
                                                            ptr_out, O,
                                                            MODE_ZEROPAD);
                }
            }
        }
        if(periodization_buf != NULL) wtfree(periodization_buf);
        if(periodization_buf_rear != NULL) wtfree(periodization_buf_rear);

        wtfree(filter_even);
        wtfree(filter_odd);

    }
    return 0;
}


/*
 * performs IDWT for all modes
 *
 * The upsampling is performed by splitting filters to even and odd elements
 * and performing 2 convolutions.  After refactoring the PERIODIZATION mode
 * case to separate function this looks much clearer now.
 */

int @type@_upsampling_convolution_valid_sf(const @type@ * const restrict input, const index_t N,
                                           const @type@ * const restrict filter, const index_t F,
                                           @type@ * const restrict output, const index_t O,
                                           MODE mode)
{
    if(mode == MODE_PERIODIZATION) /* Special case */
        return @type@_upsampling_convolution_valid_sf_periodization(input, N,
                                                                    filter, F,
                                                                    output, O);

    if((F%2) || (N < F/2)) /* Filter must have even length. */
        return -1;

    /* Perform _valid_ convolution (only when all filter_even and filter_odd elements
     * are in range of input data).
     *
     * This part is simple, no extra hacks, just two convolutions in one loop
     */

    for(index_t o = 0, i = F/2 - 1; i < N; ++i, o += 2){
        @type@ sum_even = 0;
        @type@ sum_odd = 0;

        for(index_t j = 0; j < F/2; ++j){
            sum_even += filter[j*2] * input[i-j];
            sum_odd += filter[j*2+1] * input[i-j];
        }
        output[o] += sum_even;
        output[o+1] += sum_odd;
    }
    return 0;
}

/* -> swt - todo */
int @type@_upsampled_filter_convolution(const @type@* input,
                                        const index_t N, const @type@*
                                        filter, const index_t F, @type@*
                                        output, const index_t step, MODE mode)
{
    return -1;
}

/**end repeat**/
